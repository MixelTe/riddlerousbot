from random import choice

import bafser_tgapi as tgapi

from bot.bot import Bot
from bot.utils import get_users_from_msg, silent_mode, silent_mode_on
from data.checker import Checker
from data.msg import Msg
from data.screamer import Screamer
from data.tagger import Tagger
from data.user import User


@Bot.add_command()
def start(bot: Bot, args: tgapi.BotCmdArgs, **_: str):
    for chk in Checker.all_by_user(bot.user):
        users = Tagger.get_all_by_cmd_in_chat(chk.cmd, chk.msg.chat_id)
        users.sort(key=lambda u: u.user.get_tagname() + u.user.get_username())
        msg, nof_users, reply_markup = all_check_msg(users)
        text, entities = msg.build()
        if len(nof_users) == 0:
            tgapi.editMessageText(chk.msg.chat_id, chk.msg.message_id, "üîî –í—Å–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –±–æ—Ç–æ–º –ª–∏—á–Ω–æ!")
        else:
            tgapi.editMessageText(chk.msg.chat_id, chk.msg.message_id, text, entities=entities, reply_markup=reply_markup)
        chk.delete()
    return "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è"


@Bot.add_command("goida_<txt>", desc=("–ö—Ä–∏—á–∞–ª–∫–∞", "[new_text] [\\s]"))
def goida(bot: Bot, args: tgapi.BotCmdArgs, txt: str, **_: str):
    sl = False
    if args.raw_args != "" and args.raw_args[-2:] == "\\s":
        silent_mode_on(bot)
        sl = True
        args.raw_args = args.raw_args[:-2]
    t = "ü§ü " + bot.user.get_name() + " ü§ü\n"
    if not txt:
        return t + "–¢—ã—Ü-—Ç—ã—Ü!"
    s = Screamer.get_by_cmd(txt)
    if args.raw_args != "":
        if args.raw_args == "txt":
            return None
        if s:
            s.update_text(args.raw_args)
        else:
            s = Screamer.new(txt, args.raw_args)
        bot.logger.info(f"uid={bot.user.id} ({bot.user.get_username()}) upd cmd {txt}")
        if sl:
            return None
    text = s.text if s else txt.replace("_", " ")
    return tgapi.build_msg(t).blockquote(text).build()


@Bot.add_command("q", desc=("–¶–∏—Ç–∞—Ç–∞", "<Author>\\n<text>"))
def quote(bot: Bot, args: tgapi.BotCmdArgs, **_: str):
    if args.raw_args == "":
        return "üìñ –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ: \n/q –ò–º—è –∞–≤—Ç–æ—Ä–∞\n–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"
    if bot.message:
        tgapi.deleteMessage(bot.message.chat.id, bot.message.message_id)
    parts = args.raw_args.split("\n")
    author = "\n¬©" + parts[0] + "\n"
    user = "by " + bot.user.get_name()
    text = "\n".join(parts[1:])
    return tgapi.build_msg().blockquote(text).text(author).spoiler(user).build()


@Bot.add_command("all<txt>_set", desc="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤—Å–µ—Ö")
@Bot.cmd_for_admin
def all_set(bot: Bot, args: tgapi.BotCmdArgs, txt: str, **_: str):
    if not bot.message:
        return "Call by message"
    sl = silent_mode(bot, args)
    users, err = get_users_from_msg(bot, args)
    if err:
        bot.sendMessage(err)

    Tagger.update_cmd_in_chat(bot, txt, users)
    if not sl:
        return f"‚úè –ò–∑–º–µ–Ω—ë–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥—ã /all{txt}\n" + "\n".join([user.get_name() for user in users])


@Bot.add_command("all<txt>_check", desc="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—Å–µ—Ö –ª–∏ –º–æ–∂–µ—Ç —Ç–µ–≥–∞—Ç—å –±–æ—Ç")
@Bot.cmd_for_admin
def all_check(bot: Bot, args: tgapi.BotCmdArgs, txt: str, **_: str):
    if not bot.message or not bot.chat:
        return "Call by message"
    sl = silent_mode(bot, args)

    users = Tagger.get_all_by_cmd_in_chat(txt, bot.chat.id)
    users.sort(key=lambda u: u.user.get_tagname() + u.user.get_username())

    if len(users) == 0:
        return f"–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç\n—Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: /all{txt}_set"

    msg, nof_users, reply_markup = all_check_msg(users)
    if len(nof_users) == 0:
        if sl:
            return
        return "–í—Å–µ—Ö –º–æ–∂–Ω–æ —Ç–µ–≥–∞—Ç—å!"

    ok, msg = bot.sendMessage(msg, reply_markup=reply_markup)
    if not ok:
        return "Error!"
    msg = Msg.new_from_data(bot.user, msg)
    for user in nof_users:
        Checker.new(msg, user, cmd=txt, commit=False)
    bot.db_sess.commit()


def all_check_msg(users: list[Tagger]):
    msg = tgapi.build_msg("üîî –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã /all, –ø—Ä–æ—Å–∏–º –≤–∞—Å –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É:\n")
    nof_users: list[User] = []
    for u in users:
        if not u.user.is_friendly:
            nof_users.append(u.user)
            utext = u.user.get_tagname()
            if u.user.username == "":
                msg.text_mention(utext, u.user.id_tg)
            else:
                msg.text(utext)
            msg.text(" ")
    reply_markup = tgapi.reply_markup([
        tgapi.InlineKeyboardButton.open_url("–¢—ã–∫!", f"https://t.me/{tgapi.get_bot_name()[1:]}?start=checker")
    ])
    return msg, nof_users, reply_markup


@Bot.add_command("all<txt>", desc="–í—ã–∑–≤–∞—Ç—å –≤—Å–µ—Ö!")
def all(bot: Bot, args: tgapi.BotCmdArgs, txt: str, **_: str):
    if not bot.message or not bot.chat:
        return "Call by message"
    silent_mode(bot, args)

    users = Tagger.get_all_by_cmd_in_chat(txt, bot.chat.id)
    users.sort(key=lambda u: u.user.get_tagname() + u.user.get_username())

    if len(users) == 0:
        return f"–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç\n—Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: /all{txt}_set"

    msg = tgapi.build_msg("üîî ")
    full_names = False
    if full_names:
        for u in users:
            utext = u.user.get_tagname()
            if u.user.username == "":
                msg.text_mention(utext, u.user.id_tg)
            else:
                msg.text(utext)
            msg.text(" ")
    else:
        phrase = choice([
            "–ü—Ä–∏–¥–∏—Ç–µ –∂–µ –ª—é–¥–∏ –¥–æ–±—Ä—ã–µ, –Ω–∞ –∫–ª–∏—á –±–æ–¥—Ä—ã–π!",
            "–í–∑—ã–≤–∞—é –∫ –≤–∞–º, –¥—É—à–∏ –¥–æ–±—Ä—ã–µ",
            "–í–Ω–∏–º–∞–Ω–∏–µ, –æ –≥—Ä–∞–∂–¥–∞–Ω–µ! –°–∏–µ –µ—Å—Ç—å —Å–æ–∑—ã–≤ –Ω–µ –ø—Ä–∞–∑–¥–Ω—ã–π, –Ω–æ –≤–µ—â–∏–π",
            "–°–æ–±–∏—Ä–∞–π—Ç–µ—Å—å, –ª—é–¥–∏ –¥–æ–±—Ä—ã–µ, –Ω–∞ –ø—Ä–∏–∑—ã–≤ –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏ —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π!",
            "–û—Ç–∫–ª–∏–∫–Ω–∏—Ç–µ—Å—å, –∫–æ–º—É –Ω–µ –±–µ–∑—Ä–∞–∑–ª–∏—á–Ω–∞ —Å—É–¥—å–±–∞ –æ–±—â–∞—è!",
            "–ó–æ–≤—É –≤–∞—Å, –Ω–µ –ø–æ –ø—Ä–∏—Ö–æ—Ç–∏, –∞ –ø–æ –Ω—É–∂–¥–µ –≤–µ–ª–∏–∫–æ–π!",
            "–í—ã—Ö–æ–¥–∏, –∫—Ç–æ –Ω–µ –ø—Ä—è—á–µ—Ç—Å—è! –ê —Ç–æ –ø–æ—Ç–æ–º –Ω–µ –∂–∞–ª—É–π—Å—è, —á—Ç–æ –Ω–µ –∑–≤–∞–ª–∏!",
            "–ù–∞—Å—Ç–æ—è—â–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∏–∑–≤–µ—â–∞—é—Ç—Å—è –≤—Å–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –ª–∏—Ü–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ—Ç–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞.",
            "–í–≤–∏–¥—É —Ç–µ–∫—É—â–µ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏, –¥–æ–≤–æ–¥–∏–º –¥–æ –≤–∞—à–µ–≥–æ —Å–≤–µ–¥–µ–Ω–∏—è: —É—á–∞—Å—Ç–∏–µ –∫–∞–∂–¥–æ–≥–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —Å—Ç—Ä–æ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è.",
            "–£–≤–µ–¥–æ–º–ª—è–µ–º: –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø—Ä–∏–∑—ã–≤–∞ –º–æ–∂–µ—Ç –ø–æ–≤–ª–µ—á—å –∑–∞ —Å–æ–±–æ–π –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è",
        ])
        phrase += "." * (len(users) - len(phrase))
        c = len(phrase) // len(users)
        rem = len(phrase) - c * len(users)
        for u in users:
            r = 1 if rem > 0 else 0
            rem -= 1
            utext, phrase = phrase[:c + r], phrase[c + r:]
            msg.text_mention(utext, u.user.id_tg)

    return msg.build()


@Bot.add_command()
def say(bot: Bot, args: tgapi.BotCmdArgs, **_: str):
    if not bot.user.is_admin():
        return
    if bot.message:
        tgapi.deleteMessage(bot.message.chat.id, bot.message.message_id)
    if args.raw_args == "":
        return

    return args.raw_args
