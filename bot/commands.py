from random import choice

import tgapi
from bot.bot import Bot
from bot.utils import get_users_from_msg, silent_mode, silent_mode_on
from data.screamer import Screamer
from data.tagger import Tagger

ME = tgapi.MessageEntity


@Bot.add_command("goida_<txt>", desc=("–ö—Ä–∏—á–∞–ª–∫–∞", "[new_text] [\\s]"))
@Bot.cmd_connect_db
def goida(bot: Bot, args: tgapi.BotCmdArgs, txt: str, **_: str):
    assert bot.user
    assert bot.db_sess
    sl = False
    if args.raw_args != "" and args.raw_args[-2:] == "\\s":
        silent_mode_on(bot)
        sl = True
        args.raw_args = args.raw_args[:-2]
    t = "ü§ü " + bot.user.get_name() + " ü§ü\n"
    if not txt:
        return t + "–¢—ã—Ü-—Ç—ã—Ü!"
    s = Screamer.get_by_cmd(bot.db_sess, txt)
    if args.raw_args != "":
        if args.raw_args == "txt":
            return None
        if s:
            s.update_text(bot.user, args.raw_args)
        else:
            s = Screamer.new(bot.user, txt, args.raw_args)
        bot.logger.info(f"uid={bot.user.id} ({bot.user.get_username()}) upd cmd {txt}")
        if sl:
            return None
    text = s.text if s else txt.replace("_", " ")
    bot.sendMessage(t + text, entities=[
        ME.blockquote(ME.len(t), ME.len(text)),
    ])


@Bot.add_command("q", desc=("–¶–∏—Ç–∞—Ç–∞", "<Author>\\n<text>"))
@Bot.cmd_connect_db
def quote(bot: Bot, args: tgapi.BotCmdArgs, **_: str):
    assert bot.user
    if args.raw_args == "":
        return
    if bot.message:
        tgapi.deleteMessage(bot.message.chat.id, bot.message.message_id)
    parts = args.raw_args.split("\n")
    author = "\n¬©" + parts[0] + "\n"
    user = "by " + bot.user.get_name()
    text = "\n".join(parts[1:])
    bot.sendMessage(text + author + user, entities=[
        ME.blockquote(0, ME.len(text)),
        ME.spoiler(ME.len(text + author), ME.len(user)),
    ])


@Bot.add_command("all<txt>_set", desc="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤—Å–µ—Ö")
@Bot.cmd_connect_db
@Bot.cmd_for_admin
def all_set(bot: Bot, args: tgapi.BotCmdArgs, txt: str, **_: str):
    if not bot.message:
        return "Call by message"
    sl = silent_mode(bot, args)
    users, err = get_users_from_msg(bot, args)
    if err:
        bot.sendMessage(err)

    Tagger.update_cmd_in_chat(bot, txt, users)
    if not sl:
        return f"‚úè –ò–∑–º–µ–Ω—ë–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥—ã /all{txt}\n" + "\n".join([user.get_name() for user in users])


@Bot.add_command("all<txt>", desc="–í—ã–∑–≤–∞—Ç—å –≤—Å–µ—Ö!")
@Bot.cmd_connect_db
def all(bot: Bot, args: tgapi.BotCmdArgs, txt: str, **_: str):
    assert bot.db_sess
    if not bot.message or not bot.chat:
        return "Call by message"
    silent_mode(bot, args)

    users = Tagger.get_all_by_cmd_in_chat(bot.db_sess, txt, bot.chat.id)
    users.sort(key=lambda u: u.user.get_tagname() + u.user.get_username())

    if len(users) == 0:
        bot.sendMessage(f"–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç\n—Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: /all{txt}_set")
        return

    text = "üîî "
    entities = []
    full_names = False
    if full_names:
        for u in users:
            utext = u.user.get_tagname()
            if u.user.username == "":
                entities.append(ME.text_mention(ME.len(text), ME.len(utext), u.user.id_tg))
            text += utext + " "
    else:
        phrase = choice([
            "–ü—Ä–∏–¥–∏—Ç–µ –∂–µ –ª—é–¥–∏ –¥–æ–±—Ä—ã–µ, –Ω–∞ –∫–ª–∏—á –±–æ–¥—Ä—ã–π!",
            "–í–∑—ã–≤–∞—é –∫ –≤–∞–º, –¥—É—à–∏ –¥–æ–±—Ä—ã–µ",
            "–í–Ω–∏–º–∞–Ω–∏–µ, –æ –≥—Ä–∞–∂–¥–∞–Ω–µ! –°–∏–µ –µ—Å—Ç—å —Å–æ–∑—ã–≤ –Ω–µ –ø—Ä–∞–∑–¥–Ω—ã–π, –Ω–æ –≤–µ—â–∏–π",
            "–°–æ–±–∏—Ä–∞–π—Ç–µ—Å—å, –ª—é–¥–∏ –¥–æ–±—Ä—ã–µ, –Ω–∞ –ø—Ä–∏–∑—ã–≤ –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏ —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π!",
            "–û—Ç–∫–ª–∏–∫–Ω–∏—Ç–µ—Å—å, –∫–æ–º—É –Ω–µ –±–µ–∑—Ä–∞–∑–ª–∏—á–Ω–∞ —Å—É–¥—å–±–∞ –æ–±—â–∞—è!",
            "–ó–æ–≤—É –≤–∞—Å, –Ω–µ –ø–æ –ø—Ä–∏—Ö–æ—Ç–∏, –∞ –ø–æ –Ω—É–∂–¥–µ –≤–µ–ª–∏–∫–æ–π!",
            "–í—ã—Ö–æ–¥–∏, –∫—Ç–æ –Ω–µ –ø—Ä—è—á–µ—Ç—Å—è! –ê —Ç–æ –ø–æ—Ç–æ–º –Ω–µ –∂–∞–ª—É–π—Å—è, —á—Ç–æ –Ω–µ –∑–≤–∞–ª–∏!",
            "–ù–∞—Å—Ç–æ—è—â–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∏–∑–≤–µ—â–∞—é—Ç—Å—è –≤—Å–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –ª–∏—Ü–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ—Ç–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞.",
            "–í–≤–∏–¥—É —Ç–µ–∫—É—â–µ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏, –¥–æ–≤–æ–¥–∏–º –¥–æ –≤–∞—à–µ–≥–æ —Å–≤–µ–¥–µ–Ω–∏—è: —É—á–∞—Å—Ç–∏–µ –∫–∞–∂–¥–æ–≥–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —Å—Ç—Ä–æ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è.",
            "–£–≤–µ–¥–æ–º–ª—è–µ–º: –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø—Ä–∏–∑—ã–≤–∞ –º–æ–∂–µ—Ç –ø–æ–≤–ª–µ—á—å –∑–∞ —Å–æ–±–æ–π –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è",
        ])
        phrase += "." * (len(users) - len(phrase))
        c = len(phrase) // len(users)
        rem = len(phrase) - c * len(users)
        for u in users:
            r = 1 if rem > 0 else 0
            rem -= 1
            utext, phrase = phrase[:c + r], phrase[c + r:]
            entities.append(ME.text_mention(ME.len(text), ME.len(utext), u.user.id_tg))
            text += utext

    bot.sendMessage(text, entities=entities)


@Bot.add_command("say")
@Bot.cmd_connect_db
def say(bot: Bot, args: tgapi.BotCmdArgs, **_: str):
    assert bot.user
    if bot.user.username != "MixelTe":
        return
    if bot.message:
        tgapi.deleteMessage(bot.message.chat.id, bot.message.message_id)
    if args.raw_args == "":
        return

    return args.raw_args
