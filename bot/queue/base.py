import bafser_tgapi as tgapi
from bafser import listfind

from bot.bot import Bot
from bot.queue.utils import get_queue, get_queue_by_reply, update_queue_msg_if_changes, updateQueue
from bot.utils import silent_mode
from data.queue import Queue
from data.queue_user import QueueUser
from data.user import User


@Bot.add_command(desc_adm=("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å", "<name> [\\s]"))
@Bot.cmd_for_admin
def queue_new(bot: Bot, args: tgapi.BotCmdArgs, **_: str):
    silent_mode(bot, args)
    if len(args) < 1:
        return "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –æ—á–µ—Ä–µ–¥–∏\nUsage: /queue_new <name> [\\s]"

    name = " ".join(args)
    bot.logger.info(f"creating {name}")
    ok, r = bot.sendMessage(f"üìù –û—á–µ—Ä–µ–¥—å {name}:\n‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...")
    if not ok:
        bot.logger.error(r)
        return "Error!"

    queue = Queue.new_by_message(r, name)
    bot.logger.info(f"created id={queue.id} ({name})")
    tgapi.pinChatMessage(r.chat.id, r.message_id)
    updateQueue(bot, queue)


@Bot.add_command()
def queue_enter(bot: Bot, args: tgapi.BotCmdArgs, **_: str):
    queue = get_queue(bot, args)
    qu = QueueUser.get(queue.id, bot.user.id)
    if qu is not None:
        return "–£–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏"

    bot.logger.info(f"qid={queue.id} uid={bot.user.id} ({bot.user.get_username()})")
    with update_queue_msg_if_changes(bot, queue):
        QueueUser.new(queue.id, bot.user.id)
    return "–í—ã –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å"


@Bot.add_command()
def queue_exit(bot: Bot, args: tgapi.BotCmdArgs, **_: str):
    queue = get_queue(bot, args)
    qu = QueueUser.get(queue.id, bot.user.id)
    if qu is None:
        return "–£–∂–µ –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏"

    bot.logger.info(f"qid={queue.id} uid={bot.user.id} ({bot.user.get_username()})")
    with update_queue_msg_if_changes(bot, queue):
        qu.delete()
    return "–í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"


@Bot.add_command()
def queue_pass(bot: Bot, args: tgapi.BotCmdArgs, **_: str):
    queue = get_queue(bot, args)
    qus = list(QueueUser.all_in_queue(queue.id))
    uid = bot.user.id
    qu = listfind(qus, lambda x: x.user_id == uid)
    if qu is None:
        return "–í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏"
    qui = qus.index(qu)

    if qui + 1 >= len(qus):
        return "–í—ã —É–∂–µ –≤ –∫–æ–Ω—Ü–µ –æ—á–µ—Ä–µ–¥–∏"

    next_qu = qus[qui + 1]

    bot.logger.info(f"qid={queue.id} uid={bot.user.id} ({bot.user.get_username()})")
    with update_queue_msg_if_changes(bot, queue):
        QueueUser.swap_enter_date(qu, next_qu)

    return "–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –æ–¥–Ω–æ–≥–æ"


@Bot.add_command()
def queue_end(bot: Bot, args: tgapi.BotCmdArgs, **_: str):
    queue = get_queue(bot, args)
    bot.logger.info(f"qid={queue.id} uid={bot.user.id} ({bot.user.get_username()})")
    qu = QueueUser.get(queue.id, bot.user.id)
    with update_queue_msg_if_changes(bot, queue):
        if qu is None:
            QueueUser.new(queue.id, bot.user.id)
        else:
            qu.set_now_as_enter_date()

    return "–í—ã –≤—Å—Ç–∞–ª–∏ –≤ –∫–æ–Ω–µ—Ü"


@Bot.add_command(desc=("–î–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å", "<username> [\\s]"))
def queue_add(bot: Bot, args: tgapi.BotCmdArgs, **_: str):
    s = silent_mode(bot, args)

    if len(args) < 1:
        return "–£–∫–∞–∂–∏—Ç–µ –∫–æ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å\nUsage: /queue_add <username> [\\s]"

    queue = get_queue_by_reply(bot)
    username = args[0]
    user = User.get_by_username(bot.db_sess, username)

    if not user:
        return f"üëª –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({username}) –Ω–µ –∑–Ω–∞–∫–æ–º –±–æ—Ç—É (–µ—Å–ª–∏ –≤ –∏–º–µ–Ω–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Ç, –ø—É—Å–∫–∞–π –æ–Ω —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –ø–æ–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –±–æ—Ç–æ–º)"

    qu = QueueUser.get(queue.id, user.id)
    if qu is not None:
        return f"üü¢ {user.get_tagname()} —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ {queue.name}"

    bot.logger.info(f"qid={queue.id} uid={user.id} ({user.get_username()})")
    with update_queue_msg_if_changes(bot, queue):
        QueueUser.new(queue.id, user.id)

    if not s:
        return f"üü¢ {user.get_tagname()} —Ç–µ–ø–µ—Ä—å –≤ –æ—á–µ—Ä–µ–¥–∏ {queue.name}"
